From 5da2b972363aea6931353ce26b0bbd491fdc2013 Mon Sep 17 00:00:00 2001
From: Emmanuele Bassi <ebassi@igalia.com>
Date: Thu, 17 Nov 2022 15:11:35 +0000
Subject: [PATCH 1/1] Add portal configuration file

Instead of having each portal define the preferred desktop to use its
interfaces in, we should have the desktops define the kind of portals to
use, depending on the interface.

This requires adding a new configuration file, shipped by the desktop
upstream (or by a downstream distributor) that defines the preferred
portal implementation(s) to use, with the ability to define the
implementation of each interface. The configuration file is in the
format "$DESKTOP-portals.conf", in order to match the
XDG_CURRENT_DESKTOP environment variable.

For environments that are not classified as "desktops", it's still
possible to define a "portals.conf" configuration file under
XDG_DATA_DIRS or XDG_DATA_HOME.

Fixes: https://github.com/flatpak/xdg-desktop-portal/issues/906
---
 doc/meson.build                            |  27 ++
 doc/portals-conf.rst                       |  87 ++++
 meson.build                                |   2 +
 src/portal-impl.c                          | 369 ++++++++++++++--
 src/portal-impl.h                          |   1 +
 src/xdg-desktop-portal.c                   |  70 +--
 tests/backend/test-backends.c              |  10 +-
 tests/limited-portals.c                    | 491 +++++++++++++++++++++
 tests/meson.build                          |  63 ++-
 tests/portals/limited/limited-portals.conf |   6 +
 tests/portals/limited/limited.portal       |   3 +
 tests/portals/limited/meson.build          |   6 +
 tests/portals/meson.build                  |   8 +-
 tests/portals/test/meson.build             |   6 +
 tests/portals/test/test-portals.conf       |   2 +
 tests/portals/{ => test}/test.portal       |   1 -
 tests/test-portals.c                       |   7 +-
 17 files changed, 1080 insertions(+), 79 deletions(-)
 create mode 100644 doc/portals-conf.rst
 create mode 100644 tests/limited-portals.c
 create mode 100644 tests/portals/limited/limited-portals.conf
 create mode 100644 tests/portals/limited/limited.portal
 create mode 100644 tests/portals/limited/meson.build
 create mode 100644 tests/portals/test/meson.build
 create mode 100644 tests/portals/test/test-portals.conf
 rename tests/portals/{ => test}/test.portal (98%)

diff --git a/doc/meson.build b/doc/meson.build
index 37cac0d..23ba8ec 100644
--- a/doc/meson.build
+++ b/doc/meson.build
@@ -36,4 +36,31 @@ if build_docbook
         install_dir: docs_dir,
       )
   endforeach
+
+  rst2man = find_program('rst2man', 'rst2man.py', required: false)
+  if rst2man.found()
+    rst2man_flags = [
+      '--syntax-highlight=none',
+    ]
+    
+    man_pages = [
+      { 'input': 'portals-conf.rst', 'output': 'portals.conf', 'section': '5' },
+    ]
+
+    foreach man_page: man_pages
+      man_input = man_page.get('input')
+      man_output = man_page.get('output', man_input)
+      man_section = man_page.get('section', '1')
+      man_full = '@0@.@1@'.format(man_output, man_section)
+
+      custom_target('man-' + man_output,
+        input: man_input,
+        output: man_full,
+        command: [ rst2man, rst2man_flags, '@INPUT@' ],
+        capture: true,
+        install: true,
+        install_dir: get_option('mandir') / 'man@0@'.format(man_section),
+      )
+    endforeach
+  endif
 endif
diff --git a/doc/portals-conf.rst b/doc/portals-conf.rst
new file mode 100644
index 0000000..ed1f2dc
--- /dev/null
+++ b/doc/portals-conf.rst
@@ -0,0 +1,87 @@
+.. _portals.conf(5):
+
+============
+portals.conf
+============
+
+--------------------------------
+XDG desktop portal configuration
+--------------------------------
+
+DESCRIPTION
+-----------
+
+xdg-desktop-portal uses a configuration file to determine which portal backend
+should be used to provide the implementation for the requested interface.
+
+The configuration file can be found in the following locations:
+
+- ``/etc/xdg-desktop-portals/portals.conf``, for site-wide configuration
+
+- ``$XDG_CONFIG_HOME/xdg-desktop-portals/portals.conf``, for user-specific
+  configuration
+
+Additionally, every desktop environment can provide a portal configuration file
+named ``DESKTOP-portals.conf``, where ``DESKTOP`` is the lowercase name also
+used in the ``XDG_CURRENT_DESKTOP`` environment variable.
+
+FILE FORMAT
+-----------
+
+The format of the portals configuration file is the same ``.ini`` format used by
+systemd unit files or application desktop files.
+
+``[preferred]``
+
+  The main configuration group for preferred portals.
+
+The following keys can be present in the ``preferred`` group:
+
+``default`` *(string)*
+
+  The default portal backend to use for every interface, unless the interface
+  is listed explicitly.
+
+``org.freedesktop.impl.portal.*`` *(string)*
+
+  One of the valid portal interface implementations exposed by
+  xdg-desktop-portal.
+
+Each key in the group contains a semi-colon separated list of portal backend
+implementation, to be searched for an implementation of the requested interface,
+in the same order as specified in the configuration file. Additionally, the
+special values ``none`` and ``*`` can be used:
+
+``none``
+
+  Do not provide a portal implementation for this interface.
+
+``*``
+
+  Use the first portal implementation found, in lexicographical order.
+
+EXAMPLE
+-------
+
+::
+
+  [portals]
+  # Use xdg-desktop-portal-gtk for every portal interface...
+  default=gtk
+  # ... except for the Screencast interface
+  org.freedesktop.impl.portal.Screencast=gnome
+
+
+ENVIRONMENT
+-----------
+
+``XDG_CONFIG_HOME``
+
+  The per-user ``portals.conf`` file is located in this directory. The default
+  is ``$HOME/.config``
+
+
+SEE ALSO
+--------
+
+- `XDG Desktop Entry specification <https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html>`_
diff --git a/meson.build b/meson.build
index dc65af9..e4dadd9 100644
--- a/meson.build
+++ b/meson.build
@@ -12,6 +12,7 @@ project(
 prefix = get_option('prefix')
 datadir = prefix / get_option('datadir')
 libexecdir = prefix / get_option('libexecdir')
+sysconfdir = prefix / get_option('sysconfdir')
 localedir = prefix / get_option('localedir')
 dbus_service_dir = get_option('dbus-service-dir')
 if dbus_service_dir == ''
@@ -79,6 +80,7 @@ config_h.set_quoted('G_LOG_DOMAIN', 'xdg-desktop-portal')
 config_h.set_quoted('DATADIR', datadir)
 config_h.set_quoted('LIBEXECDIR', libexecdir)
 config_h.set_quoted('LOCALEDIR', localedir)
+config_h.set_quoted('SYSCONFDIR', sysconfdir)
 config_h.set_quoted('GETTEXT_PACKAGE', 'xdg-desktop-portal')
 config_h.set_quoted('PACKAGE_STRING', 'xdg-desktop-portal @0@'.format(meson.project_version()))
 if cc.has_function('renameat2')
diff --git a/src/portal-impl.c b/src/portal-impl.c
index a55ba9e..171bdbf 100644
--- a/src/portal-impl.c
+++ b/src/portal-impl.c
@@ -29,25 +29,148 @@
 #include <glib.h>
 #include <gio/gio.h>
 
+typedef struct _PortalInterface {
+  /* dbus_name is NULL if this is the default */
+  char *dbus_name;
+  char **portals;
+} PortalInterface;
+
+typedef struct _PortalConfig {
+  char *source;
+  PortalInterface **ifaces;
+  size_t n_ifaces;
+  PortalInterface *dfl_portal;
+} PortalConfig;
+
+static void
+portal_interface_free (PortalInterface *iface)
+{
+  g_clear_pointer (&iface->dbus_name, g_free);
+  g_clear_pointer (&iface->portals, g_strfreev);
+
+  g_free (iface);
+}
+
+static void
+portal_config_free (PortalConfig *config)
+{
+  g_clear_pointer (&config->source, g_free);
+
+  for (size_t i = 0; i < config->n_ifaces; i++)
+    portal_interface_free (config->ifaces[i]);
+
+  g_clear_pointer (&config->dfl_portal, portal_interface_free);
+  g_clear_pointer (&config->ifaces, g_free);
+
+  g_free (config);
+}
+
 static void
 portal_implementation_free (PortalImplementation *impl)
 {
-  g_free (impl->source);
-  g_free (impl->dbus_name);
-  g_strfreev (impl->interfaces);
-  g_strfreev (impl->use_in);
+  g_clear_pointer (&impl->source, g_free);
+  g_clear_pointer (&impl->dbus_name, g_free);
+  g_clear_pointer (&impl->interfaces, g_strfreev);
+  g_clear_pointer (&impl->use_in, g_strfreev);
   g_free (impl);
 }
 
 G_DEFINE_AUTOPTR_CLEANUP_FUNC(PortalImplementation, portal_implementation_free)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(PortalInterface, portal_interface_free)
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(PortalConfig, portal_config_free)
+
+/* Validation code taken from gdesktopappinfo.c {{{ */
+
+/* See: https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html
+ *
+ * There's not much to go on: a desktop name must be composed of alphanumeric
+ * characters, including '-' and '_'. Since we use this value to construct file
+ * names, we are going to need avoid invalid characters
+ */
+static gboolean
+validate_xdg_desktop (const char *desktop)
+{
+  size_t i;
+
+  for (i = 0; desktop[i] != '\0'; i++)
+    {
+      if (desktop[i] != '-' &&
+          desktop[i] != '_' &&
+          !g_ascii_isalnum (desktop[i]))
+        return FALSE;
+    }
+
+  if (i == 0)
+    return FALSE;
+
+  return TRUE;
+}
+
+static char **
+get_valid_current_desktops (const char *value)
+{
+  char **tmp;
+  GPtrArray *valid_desktops;
+
+  if (value == NULL)
+    value = g_getenv ("XDG_CURRENT_DESKTOP");
+  if (value == NULL)
+    value = "";
+
+  tmp = g_strsplit (value, G_SEARCHPATH_SEPARATOR_S, 0);
+  valid_desktops = g_ptr_array_new_full (g_strv_length (tmp) + 1, g_free);
+
+  for (size_t i = 0; tmp[i] != NULL; i++)
+    {
+      if (validate_xdg_desktop (tmp[i]))
+        g_ptr_array_add (valid_desktops, tmp[i]);
+      else
+        g_free (tmp[i]);
+    }
+
+  g_ptr_array_add (valid_desktops, NULL);
+  g_free (tmp);
+
+  tmp = (char **) g_ptr_array_steal (valid_desktops, NULL);
+  g_ptr_array_unref (valid_desktops);
+
+  return tmp;
+}
+
+static const char **
+get_current_lowercase_desktops (void)
+{
+  static char **result;
+
+  if (g_once_init_enter (&result))
+    {
+      char **tmp = get_valid_current_desktops (NULL);
+
+      for (size_t i = 0; tmp[i] != NULL; i++)
+        {
+          /* Convert to lowercase */
+          for (size_t j = 0; tmp[i][j] != '\0'; j++)
+            tmp[i][j] = g_ascii_tolower (tmp[i][j]);
+        }
+
+      g_once_init_leave (&result, tmp);
+    }
 
+  return (const char **) result;
+}
+/* }}} */
+
+static PortalConfig *config = NULL;
 static GList *implementations = NULL;
 
 static gboolean
-register_portal (const char *path, gboolean opt_verbose, GError **error)
+register_portal (const char  *path,
+                 gboolean     opt_verbose,
+                 GError     **error)
 {
   g_autoptr(GKeyFile) keyfile = g_key_file_new ();
   g_autoptr(PortalImplementation) impl = g_new0 (PortalImplementation, 1);
+  g_autofree char *basename = NULL;
   int i;
 
   g_debug ("loading %s", path);
@@ -55,7 +178,8 @@ register_portal (const char *path, gboolean opt_verbose, GError **error)
   if (!g_key_file_load_from_file (keyfile, path, G_KEY_FILE_NONE, error))
     return FALSE;
 
-  impl->source = g_path_get_basename (path);
+  basename = g_path_get_basename (path);
+  impl->source = g_strndup (basename, strrchr (basename, '.') - basename);
   impl->dbus_name = g_key_file_get_string (keyfile, "portal", "DBusName", error);
   if (impl->dbus_name == NULL)
     return FALSE;
@@ -85,18 +209,22 @@ register_portal (const char *path, gboolean opt_verbose, GError **error)
         }
     }
 
-  impl->use_in = g_key_file_get_string_list (keyfile, "portal", "UseIn", NULL, error);
-  if (impl->use_in == NULL)
-    return FALSE;
-
   if (opt_verbose)
     {
-      g_autofree char *uses = g_strjoinv (", ", impl->use_in);
-      g_debug ("portal implementation for %s", uses);
       for (i = 0; impl->interfaces[i]; i++)
         g_debug ("portal implementation supports %s", impl->interfaces[i]);
     }
 
+  impl->use_in = g_key_file_get_string_list (keyfile, "portal", "UseIn", NULL, error);
+  if (opt_verbose && impl->use_in != NULL)
+    {
+      g_autofree char *uses = g_strjoinv (", ", impl->use_in);
+      g_warning ("Portal %s uses the deprecated UseIn key; the preferred method to "
+                 "match portal implementations to desktop environments is to use the "
+                 "portals.conf configuration file",
+                 uses);
+    }
+
   implementations = g_list_prepend (implementations, impl);
   impl = NULL;
 
@@ -122,21 +250,19 @@ sort_impl_by_use_in_and_name (gconstpointer a,
 {
   const PortalImplementation *pa = a;
   const PortalImplementation *pb = b;
-  const char *desktops_str = NULL;
-  g_auto(GStrv) desktops = NULL;
+  const char **desktops;
   int i;
 
-  desktops_str = g_getenv ("XDG_CURRENT_DESKTOP");
-
-  if (desktops_str == NULL)
-    desktops_str = "";
-
-  desktops = g_strsplit (desktops_str, ":", -1);
+  desktops = get_current_lowercase_desktops ();
 
   for (i = 0; desktops[i] != NULL; i++)
     {
-      gboolean use_a = g_strv_case_contains ((const char **)pa->use_in, desktops[i]);
-      gboolean use_b = g_strv_case_contains ((const char **)pb->use_in, desktops[i]);
+      gboolean use_a = pa->use_in != NULL
+                     ? g_strv_case_contains ((const char **)pa->use_in, desktops[i])
+                     : FALSE;
+      gboolean use_b = pb->use_in != NULL
+                     ? g_strv_case_contains ((const char **)pb->use_in, desktops[i])
+                     : FALSE;
 
       if (use_a != use_b)
         return use_b - use_a;
@@ -198,19 +324,196 @@ load_installed_portals (gboolean opt_verbose)
   implementations = g_list_sort (implementations, sort_impl_by_use_in_and_name);
 }
 
+static PortalConfig *
+load_portal_configuration_for_dir (gboolean    opt_verbose,
+                                   const char *base_directory,
+                                   const char *portal_file)
+{
+  g_autofree char *path = g_build_filename (base_directory, portal_file, NULL);
+  g_autoptr(GKeyFile) key_file = g_key_file_new ();
+
+  g_debug ("Looking for portals configuration in '%s'", path);
+  if (!g_key_file_load_from_file (key_file, path, G_KEY_FILE_NONE, NULL))
+    return NULL;
+
+  g_auto(GStrv) ifaces = g_key_file_get_keys (key_file, "preferred", NULL, NULL);
+
+  if (ifaces != NULL)
+    {
+      g_autoptr(GPtrArray) interfaces = g_ptr_array_new_full (g_strv_length (ifaces) + 1, NULL);
+      g_autoptr(PortalConfig) conf = g_new0 (PortalConfig, 1);
+      g_autoptr(PortalInterface) dfl_portal = NULL;
+
+      for (size_t i = 0; ifaces[i] != NULL; i++)
+        {
+          g_autoptr(PortalInterface) interface = g_new0 (PortalInterface, 1);
+
+          interface->dbus_name = g_strdup (ifaces[i]);
+          interface->portals = g_key_file_get_string_list (key_file, "preferred", ifaces[i], NULL, NULL);
+          if (interface->portals == NULL)
+            {
+              g_critical ("Invalid portals for interface '%s' in %s", ifaces[i], portal_file);
+              return NULL;
+            }
+
+          if (opt_verbose)
+            {
+              g_autofree char *preferred = g_strjoinv (", ", interface->portals);
+              g_debug ("Preferred portals for interface '%s': %s", ifaces[i], preferred);
+            }
+
+          if (strcmp (ifaces[i], "default") == 0)
+            dfl_portal = g_steal_pointer (&interface);
+          else
+            g_ptr_array_add (interfaces, g_steal_pointer (&interface));
+        }
+
+      conf->n_ifaces = interfaces->len;
+      conf->ifaces = (PortalInterface **) g_ptr_array_steal (interfaces, NULL);
+      conf->dfl_portal = g_steal_pointer (&dfl_portal);
+
+      return g_steal_pointer (&conf);
+    }
+
+  return NULL;
+}
+
+void
+load_portal_configuration (gboolean opt_verbose)
+{
+  g_autoptr(PortalConfig) conf = NULL;
+  g_autofree char *user_portal_dir = NULL;
+  const char **desktops;
+  const char *portal_dir;
+
+  /* We need to override this in the tests */
+  portal_dir = g_getenv ("XDG_DESKTOP_PORTAL_DIR");
+  if (portal_dir == NULL)
+    portal_dir = SYSCONFDIR "/xdg-desktop-portal";
+
+  user_portal_dir = g_build_filename (g_get_user_config_dir (),
+                                      "xdg-desktop-portal",
+                                      NULL);
+
+  conf = load_portal_configuration_for_dir (opt_verbose, user_portal_dir, "portals.conf");
+  if (conf != NULL)
+    {
+      if (opt_verbose)
+        g_debug ("Using user portal configuration file");
+
+      config = g_steal_pointer (&conf);
+    }
+
+  desktops = get_current_lowercase_desktops ();
+  for (size_t i = 0; desktops[i] != NULL; i++)
+    {
+      g_autofree char *portals_conf = g_strdup_printf ("%s-portals.conf", desktops[i]);
+
+      conf = load_portal_configuration_for_dir (opt_verbose, user_portal_dir, portals_conf);
+      if (conf != NULL)
+        {
+          if (opt_verbose)
+            g_debug ("Using user portal configuration file '%s' for desktop '%s'",
+                     portals_conf,
+                     desktops[i]);
+
+          config = g_steal_pointer (&conf);
+          return;
+        }
+
+      conf = load_portal_configuration_for_dir (opt_verbose, portal_dir, portals_conf);
+      if (conf != NULL)
+        {
+          if (opt_verbose)
+            g_debug ("Using system portal configuration file '%s' for desktop '%s'",
+                     portals_conf,
+                     desktops[i]);
+
+          config = g_steal_pointer (&conf);
+          return;
+        }
+    }
+}
+
+static gboolean
+portal_impl_name_matches (const PortalImplementation *impl,
+                          const PortalInterface      *iface)
+{
+  /* Exact match */
+  if (g_strv_contains ((const char * const *) iface->portals, impl->source))
+    {
+      g_debug ("Found '%s' in configuration for %s", impl->source, iface->dbus_name);
+      return TRUE;
+    }
+
+  /* The "*" alias means "any" */
+  if (g_strv_contains ((const char * const *) iface->portals, "*"))
+    {
+      g_debug ("Found '*' in configuration for %s", iface->dbus_name);
+      return TRUE;
+    }
+
+  /* No portal */
+  if (g_strv_contains ((const char * const *) iface->portals, "none"))
+    {
+      g_debug ("Found 'none' in configuration for %s", iface->dbus_name);
+      return FALSE;
+    }
+
+  return FALSE;
+}
+
+static gboolean
+portal_impl_matches_config (const PortalImplementation *impl,
+                            const char                 *interface)
+{
+  if (config == NULL)
+    return FALSE;
+
+  /* Interfaces have precedence, followed by the "default" catch all,
+   * to allow for specific interfaces to override the default
+   */
+  for (int i = 0; i < config->n_ifaces; i++)
+    {
+      const PortalInterface *iface = config->ifaces[i];
+
+      if (g_strcmp0 (iface->dbus_name, interface) == 0)
+        return portal_impl_name_matches (impl, iface);
+    }
+
+  if (config->dfl_portal)
+    return portal_impl_name_matches (impl, config->dfl_portal);
+
+  return FALSE;
+}
+
 PortalImplementation *
 find_portal_implementation (const char *interface)
 {
-  const char *desktops_str = g_getenv ("XDG_CURRENT_DESKTOP");
-  g_auto(GStrv) desktops = NULL;
-  int i;
+  const char **desktops;
   GList *l;
+  int i;
+
+  desktops = get_current_lowercase_desktops ();
+
+  for (i = 0; desktops[i] != NULL; i++)
+    {
+     for (l = implementations; l != NULL; l = l->next)
+        {
+          PortalImplementation *impl = l->data;
 
-  if (desktops_str == NULL)
-    desktops_str = "";
+          if (!g_strv_contains ((const char **)impl->interfaces, interface))
+            continue;
 
-  desktops = g_strsplit (desktops_str, ":", -1);
+          if (portal_impl_matches_config (impl, interface))
+            {
+              g_debug ("Using %s.portal for %s in %s (config)", impl->source, interface, desktops[i]);
+              return impl;
+            }
+        }
+    }
 
+  /* Fallback to the old UseIn key */
   for (i = 0; desktops[i] != NULL; i++)
     {
      for (l = implementations; l != NULL; l = l->next)
@@ -220,14 +523,15 @@ find_portal_implementation (const char *interface)
           if (!g_strv_contains ((const char **)impl->interfaces, interface))
             continue;
 
-          if (g_strv_case_contains ((const char **)impl->use_in, desktops[i]))
+          if (impl->use_in != NULL && g_strv_case_contains ((const char **)impl->use_in, desktops[i]))
             {
-              g_debug ("Using %s for %s in %s", impl->source, interface, desktops[i]);
+              g_debug ("Using %s.portal for %s in %s (fallback)", impl->source, interface, desktops[i]);
               return impl;
             }
         }
     }
 
+#if 0
   /* Fall back to *any* installed implementation */
   for (l = implementations; l != NULL; l = l->next)
     {
@@ -236,9 +540,10 @@ find_portal_implementation (const char *interface)
       if (!g_strv_contains ((const char **)impl->interfaces, interface))
         continue;
 
-      g_debug ("Falling back to %s for %s", impl->source, interface);
+      g_debug ("Falling back to %s.portal for %s", impl->source, interface);
       return impl;
     }
+#endif
 
   return NULL;
 }
@@ -257,7 +562,7 @@ find_all_portal_implementations (const char *interface)
 
       if (g_strv_contains ((const char **)impl->interfaces, interface))
         {
-          g_debug ("Using %s for %s", impl->source, interface);
+          g_debug ("Using %s.portal for %s", impl->source, interface);
           g_ptr_array_add (impls, impl);
         }
     }
diff --git a/src/portal-impl.h b/src/portal-impl.h
index a5d792d..4c82ac2 100644
--- a/src/portal-impl.h
+++ b/src/portal-impl.h
@@ -33,6 +33,7 @@ typedef struct {
 } PortalImplementation;
 
 void                  load_installed_portals          (gboolean opt_verbose);
+void                  load_portal_configuration       (gboolean opt_verbose);
 PortalImplementation *find_portal_implementation      (const char *interface);
 GPtrArray            *find_all_portal_implementations (const char *interface);
 
diff --git a/src/xdg-desktop-portal.c b/src/xdg-desktop-portal.c
index 065ce50..897c6bc 100644
--- a/src/xdg-desktop-portal.c
+++ b/src/xdg-desktop-portal.c
@@ -224,7 +224,8 @@ on_bus_acquired (GDBusConnection *connection,
                  gpointer         user_data)
 {
   PortalImplementation *implementation;
-  PortalImplementation *implementation2;
+  PortalImplementation *lockdown_impl;
+  PortalImplementation *access_impl;
   g_autoptr(GError) error = NULL;
   XdpDbusImplLockdown *lockdown;
   GQuark portal_errors G_GNUC_UNUSED;
@@ -237,11 +238,11 @@ on_bus_acquired (GDBusConnection *connection,
   init_document_proxy (connection);
   init_permission_store (connection);
 
-  implementation = find_portal_implementation ("org.freedesktop.impl.portal.Lockdown");
-  if (implementation != NULL)
+  lockdown_impl = find_portal_implementation ("org.freedesktop.impl.portal.Lockdown");
+  if (lockdown_impl != NULL)
     lockdown = xdp_dbus_impl_lockdown_proxy_new_sync (connection,
                                                       G_DBUS_PROXY_FLAGS_NONE,
-                                                      implementation->dbus_name,
+                                                      lockdown_impl->dbus_name,
                                                       DESKTOP_PORTAL_OBJECT_PATH,
                                                       NULL, &error);
   else
@@ -284,41 +285,47 @@ on_bus_acquired (GDBusConnection *connection,
     export_portal_implementation (connection,
                                   inhibit_create (connection, implementation->dbus_name));
 
-  implementation = find_portal_implementation ("org.freedesktop.impl.portal.Access");
-  implementation2 = find_portal_implementation ("org.freedesktop.impl.portal.Screenshot");
-  if (implementation != NULL && implementation2 != NULL)
-    export_portal_implementation (connection,
-                                  screenshot_create (connection,
-                                                     implementation->dbus_name,
-                                                     implementation2->dbus_name));
-
-  implementation2 = find_portal_implementation ("org.freedesktop.impl.portal.Background");
-  if (implementation != NULL)
+  access_impl = find_portal_implementation ("org.freedesktop.impl.portal.Access");
+  if (access_impl != NULL)
     {
+      PortalImplementation *tmp;
+
       export_portal_implementation (connection,
-                                    device_create (connection, implementation->dbus_name, lockdown));
+                                    device_create (connection,
+                                                   access_impl->dbus_name,
+                                                   lockdown));
 #ifdef HAVE_GEOCLUE
       export_portal_implementation (connection,
-                                    location_create (connection, implementation->dbus_name, lockdown));
+                                    location_create (connection,
+                                                     access_impl->dbus_name,
+                                                     lockdown));
 #endif
-
 #ifdef HAVE_PIPEWIRE
-      export_portal_implementation (connection, camera_create (connection, lockdown));
+      export_portal_implementation (connection,
+                                    camera_create (connection, lockdown));
 #endif
-    }
-
-  if (implementation != NULL && implementation2 != NULL)
-    export_portal_implementation (connection,
-                                  background_create (connection,
-                                                     implementation->dbus_name,
-                                                     implementation2->dbus_name));
 
-  implementation2 = find_portal_implementation ("org.freedesktop.impl.portal.Wallpaper");
-  if (implementation != NULL && implementation2 != NULL)
-    export_portal_implementation (connection,
-                                  wallpaper_create (connection,
-                                                    implementation->dbus_name,
-                                                    implementation2->dbus_name));
+      tmp = find_portal_implementation ("org.freedesktop.impl.portal.Screenshot");
+      if (tmp != NULL)
+        export_portal_implementation (connection,
+                                      screenshot_create (connection,
+                                                         access_impl->dbus_name,
+                                                         tmp->dbus_name));
+
+      tmp = find_portal_implementation ("org.freedesktop.impl.portal.Background");
+      if (tmp != NULL)
+        export_portal_implementation (connection,
+                                      background_create (connection,
+                                                         access_impl->dbus_name,
+                                                         tmp->dbus_name));
+
+      tmp = find_portal_implementation ("org.freedesktop.impl.portal.Wallpaper");
+      if (tmp != NULL)
+        export_portal_implementation (connection,
+                                      wallpaper_create (connection,
+                                                        access_impl->dbus_name,
+                                                        tmp->dbus_name));
+    }
 
   implementation = find_portal_implementation ("org.freedesktop.impl.portal.Account");
   if (implementation != NULL)
@@ -434,6 +441,7 @@ main (int argc, char *argv[])
 
   g_set_prgname (argv[0]);
 
+  load_portal_configuration (opt_verbose);
   load_installed_portals (opt_verbose);
 
   loop = g_main_loop_new (NULL, FALSE);
diff --git a/tests/backend/test-backends.c b/tests/backend/test-backends.c
index 627ddda..bf6261f 100644
--- a/tests/backend/test-backends.c
+++ b/tests/backend/test-backends.c
@@ -21,7 +21,6 @@
 
 #include "src/glib-backports.h"
 
-#define BACKEND_BUS_NAME "org.freedesktop.impl.portal.Test"
 #define BACKEND_OBJECT_PATH "/org/freedesktop/portal/desktop"
 
 static GMainLoop *loop;
@@ -59,13 +58,16 @@ on_name_lost (GDBusConnection *connection,
               const gchar     *name,
               gpointer         user_data)
 {
+  g_debug ("%s lost", name);
   g_main_loop_quit (loop);
 }
 
 static gboolean opt_verbose;
 static gboolean opt_replace;
+static char *opt_backend_name;
 
 static GOptionEntry entries[] = {
+  { "backend-name", 0, 0, G_OPTION_ARG_STRING, &opt_backend_name, "The name of the backend on the bus", NULL },
   { "verbose", 'v', 0, G_OPTION_ARG_NONE, &opt_verbose, "Print debug information during command processing", NULL },
   { "replace", 'r', 0, G_OPTION_ARG_NONE, &opt_replace, "Replace a running instance", NULL },
   { NULL }
@@ -120,6 +122,9 @@ main (int argc, char *argv[])
       return 1;
     }
 
+  if (opt_backend_name == NULL)
+    g_error ("You must specify the name of the backend to own on the bus");
+
   g_set_printerr_handler (printerr_handler);
   if (opt_verbose)
     g_log_set_handler (G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, message_handler, NULL);
@@ -133,8 +138,9 @@ main (int argc, char *argv[])
       return 2;
     }
 
+  g_debug ("Testing backends for '%s'", opt_backend_name);
   owner_id = g_bus_own_name (G_BUS_TYPE_SESSION,
-                             BACKEND_BUS_NAME,
+                             opt_backend_name,
                              G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT | (opt_replace ? G_BUS_NAME_OWNER_FLAGS_REPLACE : 0),
                              on_bus_acquired,
                              on_name_acquired,
diff --git a/tests/limited-portals.c b/tests/limited-portals.c
new file mode 100644
index 0000000..ee7eea8
--- /dev/null
+++ b/tests/limited-portals.c
@@ -0,0 +1,491 @@
+#include "config.h"
+
+#include <string.h>
+#include <locale.h>
+
+#include <gio/gio.h>
+
+#include "src/glib-backports.h"
+#include "xdp-dbus.h"
+#include "xdp-utils.h"
+#include "xdp-impl-dbus.h"
+
+#ifdef HAVE_LIBPORTAL
+#include "account.h"
+#include "background.h"
+#include "camera.h"
+#include "email.h"
+#include "filechooser.h"
+#include "inhibit.h"
+#include "location.h"
+#include "notification.h"
+#include "openuri.h"
+#include "print.h"
+#include "screenshot.h"
+#include "trash.h"
+#include "wallpaper.h"
+#endif
+
+#include "utils.h"
+
+/* required while we support meson + autotools. Autotools builds everything in
+   the root dir ('.'), meson builds in each subdir nested and overrides these for
+   g_test_build_filename */
+#ifndef XDG_DP_BUILDDIR
+#define XDG_DP_BUILDDIR "."
+#endif
+#ifndef XDG_PS_BUILDDIR
+#define XDG_PS_BUILDDIR "."
+#endif
+
+#define PORTAL_BUS_NAME "org.freedesktop.portal.Desktop"
+#define PORTAL_OBJECT_PATH "/org/freedesktop/portal/desktop"
+#define BACKEND_BUS_NAME "org.freedesktop.impl.portal.Limited"
+#define BACKEND_OBJECT_PATH "/org/freedesktop/portal/desktop"
+
+#include "document-portal/permission-store-dbus.h"
+
+char outdir[] = "/tmp/xdp-test-XXXXXX";
+
+static GTestDBus *dbus;
+static GDBusConnection *session_bus;
+static GList *test_procs = NULL;
+XdpDbusImplPermissionStore *permission_store;
+XdpDbusImplLockdown *lockdown;
+
+int
+xdup (int oldfd)
+{
+  int newfd = dup (oldfd);
+
+  if (newfd < 0)
+    g_error ("Unable to duplicate fd %d: %s", oldfd, g_strerror (errno));
+
+  return newfd;
+}
+
+static void
+name_appeared_cb (GDBusConnection *bus,
+                  const char *name,
+                  const char *name_owner,
+                  gpointer data)
+{
+  gboolean *b = (gboolean *)data;
+
+  g_debug ("Name %s now owned by %s\n", name, name_owner);
+
+  *b = TRUE;
+
+  g_main_context_wakeup (NULL);
+}
+
+static void
+name_disappeared_cb (GDBusConnection *bus,
+                     const char *name,
+                     gpointer data)
+{
+  g_debug ("Name %s disappeared\n", name);
+}
+
+static gboolean
+timeout_cb (gpointer data)
+{
+  const char *msg = data;
+
+  g_error ("%s", msg);
+
+  return G_SOURCE_REMOVE;
+}
+
+static void
+update_data_dirs (void)
+{
+  const char *data_dirs;
+  gssize len = 0;
+  GString *str;
+  char *new_val;
+
+  data_dirs = g_getenv ("XDG_DATA_DIRS");
+  if (data_dirs != NULL &&
+      strstr (data_dirs, "/usr/share") != NULL)
+    {
+      return;
+    }
+
+  if (data_dirs != NULL)
+    {
+      len = strlen (data_dirs);
+      if (data_dirs[len] == ':')
+        len--;
+    }
+
+  str = g_string_new_len (data_dirs, len);
+  if (str->len > 0)
+    g_string_append_c (str, ':');
+  g_string_append (str, "/usr/local/share/:/usr/share/");
+  new_val = g_string_free (str, FALSE);
+
+  g_debug ("Setting XDG_DATA_DIRS to %s", new_val);
+  g_setenv ("XDG_DATA_DIRS", new_val, TRUE);
+  /* new_val is leaked */
+}
+
+static void
+global_setup (void)
+{
+  GError *error = NULL;
+  g_autofree gchar *backends_executable = NULL;
+  g_autofree gchar *services = NULL;
+  g_autofree gchar *portal_dir = NULL;
+  g_autofree gchar *argv0 = NULL;
+  g_autoptr(GSubprocessLauncher) launcher = NULL;
+  g_autoptr(GSubprocess) subprocess = NULL;
+  guint name_timeout;
+  const char *argv[4];
+  GQuark portal_errors G_GNUC_UNUSED;
+  static gboolean name_appeared;
+  guint watch;
+  guint timeout_mult = 1;
+
+  update_data_dirs ();
+
+  g_mkdtemp (outdir);
+  g_debug ("outdir: %s\n", outdir);
+
+  g_setenv ("XDG_RUNTIME_DIR", outdir, TRUE);
+  g_setenv ("XDG_DATA_HOME", outdir, TRUE);
+
+  /* Re-defining dbus-daemon with a custom script */
+  setup_dbus_daemon_wrapper (outdir);
+
+  dbus = g_test_dbus_new (G_TEST_DBUS_NONE);
+  services = g_test_build_filename (G_TEST_BUILT, "services", NULL);
+  g_test_dbus_add_service_dir (dbus, services);
+  g_test_dbus_up (dbus);
+
+  if (g_getenv ("TEST_IN_CI"))
+    timeout_mult = 10;
+
+  /* g_test_dbus_up unsets this, so re-set */
+  g_setenv ("XDG_RUNTIME_DIR", outdir, TRUE);
+
+  session_bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
+  g_assert_no_error (error);
+
+  /* start portal backends */
+  name_appeared = FALSE;
+  watch = g_bus_watch_name_on_connection (session_bus,
+                                          BACKEND_BUS_NAME,
+                                          0,
+                                          name_appeared_cb,
+                                          name_disappeared_cb,
+                                          &name_appeared,
+                                          NULL);
+
+  launcher = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_NONE);
+  g_subprocess_launcher_setenv (launcher, "G_DEBUG", "fatal-criticals", TRUE);
+  g_subprocess_launcher_setenv (launcher, "DBUS_SESSION_BUS_ADDRESS", g_test_dbus_get_bus_address (dbus), TRUE);
+  g_subprocess_launcher_setenv (launcher, "XDG_DATA_HOME", outdir, TRUE);
+  g_subprocess_launcher_setenv (launcher, "PATH", g_getenv ("PATH"), TRUE);
+  g_subprocess_launcher_take_stdout_fd (launcher, xdup (STDERR_FILENO));
+
+  backends_executable = g_test_build_filename (G_TEST_BUILT, "test-backends", NULL);
+  argv[0] = backends_executable;
+  argv[1] = "--backend-name=" BACKEND_BUS_NAME;
+  argv[2] = g_test_verbose () ? "--verbose" : NULL;
+  argv[3] = NULL;
+
+  g_debug ("launching test-backend\n");
+
+  subprocess = g_subprocess_launcher_spawnv (launcher, argv, &error);
+  g_assert_no_error (error);
+  g_test_message ("Launched %s with pid %s\n", argv[0],
+                  g_subprocess_get_identifier (subprocess));
+  test_procs = g_list_append (test_procs, g_steal_pointer (&subprocess));
+
+  name_timeout = g_timeout_add (1000 * timeout_mult, timeout_cb, "Failed to launch test-backends");
+
+  while (!name_appeared)
+    g_main_context_iteration (NULL, TRUE);
+
+  g_source_remove (name_timeout);
+  g_bus_unwatch_name (watch);
+
+  /* start permission store */
+  name_appeared = FALSE;
+  watch = g_bus_watch_name_on_connection (session_bus,
+                                          "org.freedesktop.impl.portal.PermissionStore",
+                                          0,
+                                          name_appeared_cb,
+                                          name_disappeared_cb,
+                                          &name_appeared,
+                                          NULL);
+
+  g_clear_object (&launcher);
+  launcher = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_NONE);
+  g_subprocess_launcher_setenv (launcher, "G_DEBUG", "fatal-criticals", TRUE);
+  g_subprocess_launcher_setenv (launcher, "DBUS_SESSION_BUS_ADDRESS", g_test_dbus_get_bus_address (dbus), TRUE);
+  g_subprocess_launcher_setenv (launcher, "XDG_DATA_HOME", outdir, TRUE);
+  g_subprocess_launcher_setenv (launcher, "PATH", g_getenv ("PATH"), TRUE);
+  g_subprocess_launcher_take_stdout_fd (launcher, xdup (STDERR_FILENO));
+
+  if (g_getenv ("XDP_UNINSTALLED") != NULL)
+    argv0 = g_test_build_filename (G_TEST_BUILT, "..", XDG_PS_BUILDDIR, "xdg-permission-store", NULL);
+  else
+    argv0 = g_strdup (LIBEXECDIR "/xdg-permission-store");
+
+  argv[0] = argv0;
+  argv[1] = "--replace";
+  argv[2] = g_test_verbose () ? "--verbose" : NULL;
+  argv[3] = NULL;
+
+  g_debug ("launching %s\n", argv0);
+
+  subprocess = g_subprocess_launcher_spawnv (launcher, argv, &error);
+  g_assert_no_error (error);
+  g_test_message ("Launched %s with pid %s\n", argv[0],
+                  g_subprocess_get_identifier (subprocess));
+  test_procs = g_list_append (test_procs, g_steal_pointer (&subprocess));
+
+  name_timeout = g_timeout_add (1000 * timeout_mult, timeout_cb, "Failed to launch xdg-permission-store");
+
+  while (!name_appeared)
+    g_main_context_iteration (NULL, TRUE);
+
+  g_source_remove (name_timeout);
+  g_bus_unwatch_name (watch);
+
+  /* start portals */
+  name_appeared = FALSE;
+  watch = g_bus_watch_name_on_connection (session_bus,
+                                          PORTAL_BUS_NAME,
+                                          0,
+                                          name_appeared_cb,
+                                          name_disappeared_cb,
+                                          &name_appeared,
+                                          NULL);
+
+  portal_dir = g_test_build_filename (G_TEST_DIST, "portals", "limited", NULL);
+
+  g_clear_object (&launcher);
+  launcher = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_NONE);
+  g_subprocess_launcher_setenv (launcher, "G_DEBUG", "fatal-criticals", TRUE);
+  g_subprocess_launcher_setenv (launcher, "DBUS_SESSION_BUS_ADDRESS", g_test_dbus_get_bus_address (dbus), TRUE);
+  g_subprocess_launcher_setenv (launcher, "XDG_DESKTOP_PORTAL_DIR", portal_dir, TRUE);
+  g_subprocess_launcher_setenv (launcher, "XDG_DATA_HOME", outdir, TRUE);
+  g_subprocess_launcher_setenv (launcher, "PATH", g_getenv ("PATH"), TRUE);
+  g_subprocess_launcher_take_stdout_fd (launcher, xdup (STDERR_FILENO));
+
+  if (g_getenv ("XDP_UNINSTALLED") != NULL)
+    argv0 = g_test_build_filename (G_TEST_BUILT, "..", XDG_DP_BUILDDIR, "xdg-desktop-portal", NULL);
+  else
+    argv0 = g_strdup (LIBEXECDIR "/xdg-desktop-portal");
+
+  argv[0] = argv0;
+  argv[1] = g_test_verbose () ? "--verbose" : NULL;
+  argv[2] = NULL;
+
+  g_debug ("launching %s\n", argv0);
+
+  subprocess = g_subprocess_launcher_spawnv (launcher, argv, &error);
+  g_assert_no_error (error);
+  g_test_message ("Launched %s with pid %s\n", argv[0],
+                  g_subprocess_get_identifier (subprocess));
+  test_procs = g_list_append (test_procs, g_steal_pointer (&subprocess));
+  g_clear_pointer (&argv0, g_free);
+
+  name_timeout = g_timeout_add (1000 * timeout_mult, timeout_cb, "Failed to launch xdg-desktop-portal");
+
+  while (!name_appeared)
+    g_main_context_iteration (NULL, TRUE);
+
+  g_source_remove (name_timeout);
+  g_bus_unwatch_name (watch);
+
+  permission_store = xdp_dbus_impl_permission_store_proxy_new_sync (session_bus,
+                                                                    0,
+                                                                    "org.freedesktop.impl.portal.PermissionStore",
+                                                                    "/org/freedesktop/impl/portal/PermissionStore",
+                                                                    NULL,
+                                                                    &error);
+  g_assert_no_error (error);
+
+  lockdown = xdp_dbus_impl_lockdown_proxy_new_sync (session_bus,
+                                                    0,
+                                                    BACKEND_BUS_NAME,
+                                                    BACKEND_OBJECT_PATH,
+                                                    NULL,
+                                                    &error);
+  g_assert_no_error (error);
+
+  /* make sure errors are registered */
+  portal_errors = XDG_DESKTOP_PORTAL_ERROR;
+}
+
+static void
+wait_for_test_procs (void)
+{
+  GList *l;
+
+  for (l = test_procs; l; l = l->next)
+    {
+      GSubprocess *subprocess = G_SUBPROCESS (l->data);
+      GError *error = NULL;
+      g_autofree char *identifier = NULL;
+
+      identifier = g_strdup (g_subprocess_get_identifier (subprocess));
+
+      g_debug ("Terminating and waiting for process %s", identifier);
+      g_subprocess_send_signal (subprocess, SIGTERM);
+
+      /* This may lead the test to hang, we assume that the test suite or CI
+       * can handle the case at upper level, without having us async function
+       * and timeouts */
+      g_subprocess_wait (subprocess, NULL, &error);
+      g_assert_no_error (error);
+      g_assert_null (g_subprocess_get_identifier (subprocess));
+
+      if (!g_subprocess_get_if_exited (subprocess))
+        {
+          g_assert_true (g_subprocess_get_if_signaled (subprocess));
+          g_assert_cmpint (g_subprocess_get_term_sig (subprocess), ==, SIGTERM);
+        }
+      else if (!g_subprocess_get_successful (subprocess))
+        {
+          g_error ("Subprocess %s, exited with exit status %d", identifier,
+                   g_subprocess_get_exit_status (subprocess));
+        }
+    }
+}
+
+static void
+global_teardown (void)
+{
+  GError *error = NULL;
+
+  g_dbus_connection_flush_sync (session_bus, NULL, &error);
+  g_assert_no_error (error);
+
+  g_dbus_connection_close_sync (session_bus, NULL, &error);
+  g_assert_no_error (error);
+
+  wait_for_test_procs ();
+  g_list_free_full (g_steal_pointer (&test_procs), g_object_unref);
+
+  g_object_unref (lockdown);
+  g_object_unref (permission_store);
+
+  g_object_unref (session_bus);
+
+  g_test_dbus_down (dbus);
+
+  g_object_unref (dbus);
+}
+
+/* Just check that the portal is there, and has the
+ * expected version. This will fail if the backend
+ * is not found.
+ */
+#define DEFINE_TEST_EXISTS(pp,PP,version) \
+static void \
+test_##pp##_exists (void) \
+{ \
+  g_autoptr(GDBusProxy) proxy = NULL; \
+  g_autoptr(GError) error = NULL; \
+  g_autofree char *owner = NULL; \
+ \
+  proxy = G_DBUS_PROXY (xdp_dbus_##pp##_proxy_new_sync (session_bus, \
+                                                        0, \
+                                                        PORTAL_BUS_NAME, \
+                                                        PORTAL_OBJECT_PATH, \
+                                                        NULL, \
+                                                        &error)); \
+  g_assert_no_error (error); \
+ \
+  owner = g_dbus_proxy_get_name_owner (proxy); \
+  g_assert_nonnull (owner); \
+ \
+  g_assert_cmpuint (xdp_dbus_##pp##_get_version (XDP_DBUS_##PP (proxy)), ==, version); \
+}
+
+/* Just check that the portal is not there.
+ *
+ * We do a version check, but we hardcode the default value of zero,
+ * as all portals will have a version greater than, or equal to one.
+ */
+#define DEFINE_TEST_DOES_NOT_EXIST(pp,PP) \
+static void \
+test_##pp##_does_not_exist (void) \
+{ \
+  g_autoptr(GDBusProxy) proxy = NULL; \
+  g_autoptr(GError) error = NULL; \
+  g_autofree char *owner = NULL; \
+ \
+  proxy = G_DBUS_PROXY (xdp_dbus_##pp##_proxy_new_sync (session_bus, \
+                                                        0, \
+                                                        PORTAL_BUS_NAME, \
+                                                        PORTAL_OBJECT_PATH, \
+                                                        NULL, \
+                                                        &error)); \
+  g_assert_no_error (error); \
+ \
+  owner = g_dbus_proxy_get_name_owner (proxy); \
+  g_assert_nonnull (owner); \
+ \
+  g_assert_cmpuint (xdp_dbus_##pp##_get_version (XDP_DBUS_##PP (proxy)), ==, 0); \
+}
+
+DEFINE_TEST_EXISTS(file_chooser, FILE_CHOOSER, 3)
+
+DEFINE_TEST_DOES_NOT_EXIST(print, PRINT)
+
+int
+main (int argc, char **argv)
+{
+  int res;
+
+  g_log_writer_default_set_use_stderr (TRUE);
+
+  setlocale (LC_ALL, NULL);
+
+  g_test_init (&argc, &argv, NULL);
+
+  g_test_add_func ("/limited/filechooser/exists", test_file_chooser_exists);
+  g_test_add_func ("/limited/print/does-not-exist", test_print_does_not_exist);
+
+#ifdef HAVE_LIBPORTAL
+  g_test_add_func ("/limited/openfile/basic", test_open_file_basic);
+  g_test_add_func ("/limited/openfile/delay", test_open_file_delay);
+  g_test_add_func ("/limited/openfile/close", test_open_file_close);
+  g_test_add_func ("/limited/openfile/cancel", test_open_file_cancel);
+  g_test_add_func ("/limited/openfile/multiple", test_open_file_multiple);
+  g_test_add_func ("/limited/openfile/filters1", test_open_file_filters1);
+  g_test_add_func ("/limited/openfile/filters2", test_open_file_filters2);
+  g_test_add_func ("/limited/openfile/current_filter1", test_open_file_current_filter1);
+  g_test_add_func ("/limited/openfile/current_filter2", test_open_file_current_filter2);
+  g_test_add_func ("/limited/openfile/current_filter3", test_open_file_current_filter3);
+  g_test_add_func ("/limited/openfile/current_filter4", test_open_file_current_filter4);
+  g_test_add_func ("/limited/openfile/choices1", test_open_file_choices1);
+  g_test_add_func ("/limited/openfile/choices2", test_open_file_choices2);
+  g_test_add_func ("/limited/openfile/choices3", test_open_file_choices3);
+  g_test_add_func ("/limited/openfile/parallel", test_open_file_parallel);
+
+  g_test_add_func ("/limited/savefile/basic", test_save_file_basic);
+  g_test_add_func ("/limited/savefile/delay", test_save_file_delay);
+  g_test_add_func ("/limited/savefile/close", test_save_file_close);
+  g_test_add_func ("/limited/savefile/cancel", test_save_file_cancel);
+  g_test_add_func ("/limited/savefile/filters", test_save_file_filters);
+  g_test_add_func ("/limited/savefile/lockdown", test_save_file_lockdown);
+  g_test_add_func ("/limited/savefile/parallel", test_save_file_parallel);
+#endif
+
+  global_setup ();
+
+  res = g_test_run ();
+
+  sleep (1);
+
+  global_teardown ();
+
+  return res;
+}
diff --git a/tests/meson.build b/tests/meson.build
index 1fb7e07..6bafec6 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -94,8 +94,13 @@ test_portals_sources = files(
   'utils.c',
 )
 
+limited_portals_sources = files(
+  'limited-portals.c',
+  'utils.c',
+)
+
 if have_libportal
-  test_portals_sources += files(
+  extra_portals_sources = files(
     'account.c',
     'background.c',
     'camera.c',
@@ -111,6 +116,9 @@ if have_libportal
     'wallpaper.c',
     'glib-backports.c',
   )
+
+  test_portals_sources += extra_portals_sources
+  limited_portals_sources += extra_portals_sources
 endif
 
 test_portals = executable(
@@ -118,7 +126,28 @@ test_portals = executable(
   test_portals_sources + portal_built_sources + impl_built_sources + xdp_utils_sources + sd_escape_sources,
   dependencies: [common_deps, libportal_dep, libsystemd_dep],
   include_directories: [common_includes, xdp_utils_includes],
-  c_args: ['-DXDG_DP_BUILDDIR="src"',  '-DXDG_PS_BUILDDIR="document-portal"'],
+  c_args: [
+    '-DXDG_DP_BUILDDIR="src"',
+    '-DXDG_PS_BUILDDIR="document-portal"',
+  ],
+  install: enable_installed_tests,
+  install_dir: installed_tests_dir,
+)
+
+limited_portals = executable(
+  'limited-portals',
+  impl_built_sources,
+  permission_store_built_sources,
+  portal_built_sources,
+  sd_escape_sources,
+  limited_portals_sources,
+  xdp_utils_sources,
+  dependencies: [common_deps, libportal_dep, libsystemd_dep],
+  include_directories: [common_includes, xdp_utils_includes],
+  c_args: [
+    '-DXDG_DP_BUILDDIR="src"',
+    '-DXDG_PS_BUILDDIR="document-portal"',
+  ],
   install: enable_installed_tests,
   install_dir: installed_tests_dir,
 )
@@ -144,13 +173,39 @@ portal_tests = [
   'trash',
   'wallpaper',
 ]
+
+test_env = env_tests
+test_env.set('XDG_CURRENT_DESKTOP', 'test')
 foreach p : portal_tests
     test(
       'test-portals-@0@'.format(p),
       test_portals,
-      args: ['--keep-going', '--tap', '-p', '/portal/@0@'.format(p)],
+      args: ['--verbose', '--keep-going', '--tap', '-p', '/portal/@0@'.format(p)],
       depends: [test_backends, test_portals],
-      env: env_tests,
+      env: test_env,
+      is_parallel: false,
+      protocol: test_protocol,
+      suite: 'portals',
+    )
+endforeach
+
+# Split the portal tests into one test per portal, this makes debugging a lot
+# easier.
+# Keep in sync with test-portals.c
+portal_limited = [
+  'openfile',
+  'savefile',
+]
+
+limited_env = env_tests
+limited_env.set('XDG_CURRENT_DESKTOP', 'limited')
+foreach p : portal_limited
+    test(
+      'limited-portals-@0@'.format(p),
+      limited_portals,
+      args: ['--verbose', '--keep-going', '--tap', '-p', '/limited/@0@'.format(p)],
+      depends: [test_backends, limited_portals],
+      env: limited_env,
       is_parallel: false,
       protocol: test_protocol,
       suite: 'portals',
diff --git a/tests/portals/limited/limited-portals.conf b/tests/portals/limited/limited-portals.conf
new file mode 100644
index 0000000..57b1642
--- /dev/null
+++ b/tests/portals/limited/limited-portals.conf
@@ -0,0 +1,6 @@
+[preferred]
+default=none
+org.freedesktop.impl.portal.Account=limited
+org.freedesktop.impl.portal.FileChooser=limited
+org.freedesktop.impl.portal.Lockdown=limited
+org.freedesktop.impl.portal.Settings=limited
diff --git a/tests/portals/limited/limited.portal b/tests/portals/limited/limited.portal
new file mode 100644
index 0000000..05e4cd2
--- /dev/null
+++ b/tests/portals/limited/limited.portal
@@ -0,0 +1,3 @@
+[portal]
+DBusName=org.freedesktop.impl.portal.Limited
+Interfaces=org.freedesktop.impl.portal.Account;org.freedesktop.impl.portal.Email;org.freedesktop.impl.portal.FileChooser;org.freedesktop.impl.portal.Screenshot;org.freedesktop.impl.portal.Lockdown;org.freedesktop.impl.portal.Print;org.freedesktop.impl.portal.Access;org.freedesktop.impl.portal.Inhibit;org.freedesktop.impl.portal.AppChooser;org.freedesktop.impl.portal.Wallpaper;org.freedesktop.impl.portal.Background;org.freedesktop.impl.portal.Notification;org.freedesktop.impl.portal.Settings;org.freedesktop.impl.portal.RemoteDesktop;
diff --git a/tests/portals/limited/meson.build b/tests/portals/limited/meson.build
new file mode 100644
index 0000000..652f2d8
--- /dev/null
+++ b/tests/portals/limited/meson.build
@@ -0,0 +1,6 @@
+limited_portal = configure_file(input: 'limited.portal',
+    output: '@PLAINNAME@',
+    copy: true,
+    install: enable_installed_tests,
+    install_dir: installed_tests_dir / 'portals/limited',
+)
diff --git a/tests/portals/meson.build b/tests/portals/meson.build
index 1e83070..11c14c1 100644
--- a/tests/portals/meson.build
+++ b/tests/portals/meson.build
@@ -1,6 +1,2 @@
-test_portal = configure_file(input: 'test.portal',
-    output: '@PLAINNAME@',
-    copy: true,
-    install: enable_installed_tests,
-    install_dir: installed_tests_dir / 'portals',
-)
+subdir('test')
+subdir('limited')
diff --git a/tests/portals/test/meson.build b/tests/portals/test/meson.build
new file mode 100644
index 0000000..1053d4b
--- /dev/null
+++ b/tests/portals/test/meson.build
@@ -0,0 +1,6 @@
+test_portal = configure_file(input: 'test.portal',
+    output: '@PLAINNAME@',
+    copy: true,
+    install: enable_installed_tests,
+    install_dir: installed_tests_dir / 'portals/test',
+)
diff --git a/tests/portals/test/test-portals.conf b/tests/portals/test/test-portals.conf
new file mode 100644
index 0000000..d2b8e4d
--- /dev/null
+++ b/tests/portals/test/test-portals.conf
@@ -0,0 +1,2 @@
+[preferred]
+default=test;
diff --git a/tests/portals/test.portal b/tests/portals/test/test.portal
similarity index 98%
rename from tests/portals/test.portal
rename to tests/portals/test/test.portal
index 6df6b1c..a7be0cc 100644
--- a/tests/portals/test.portal
+++ b/tests/portals/test/test.portal
@@ -1,4 +1,3 @@
 [portal]
 DBusName=org.freedesktop.impl.portal.Test
 Interfaces=org.freedesktop.impl.portal.Account;org.freedesktop.impl.portal.Email;org.freedesktop.impl.portal.FileChooser;org.freedesktop.impl.portal.Screenshot;org.freedesktop.impl.portal.Lockdown;org.freedesktop.impl.portal.Print;org.freedesktop.impl.portal.Access;org.freedesktop.impl.portal.Inhibit;org.freedesktop.impl.portal.AppChooser;org.freedesktop.impl.portal.Wallpaper;org.freedesktop.impl.portal.Background;org.freedesktop.impl.portal.Notification;org.freedesktop.impl.portal.Settings;org.freedesktop.impl.portal.RemoteDesktop;
-UseIn=test
diff --git a/tests/test-portals.c b/tests/test-portals.c
index 4ccbbf8..bd05c40 100644
--- a/tests/test-portals.c
+++ b/tests/test-portals.c
@@ -190,8 +190,9 @@ global_setup (void)
 
   backends_executable = g_test_build_filename (G_TEST_BUILT, "test-backends", NULL);
   argv[0] = backends_executable;
-  argv[1] = g_test_verbose () ? "--verbose" : NULL;
-  argv[2] = NULL;
+  argv[1] = "--backend-name=" BACKEND_BUS_NAME;
+  argv[2] = g_test_verbose () ? "--verbose" : NULL;
+  argv[3] = NULL;
 
   g_debug ("launching test-backend\n");
 
@@ -263,7 +264,7 @@ global_setup (void)
                                           &name_appeared,
                                           NULL);
 
-  portal_dir = g_test_build_filename (G_TEST_DIST, "portals", NULL);
+  portal_dir = g_test_build_filename (G_TEST_DIST, "portals", "test", NULL);
 
   g_clear_object (&launcher);
   launcher = g_subprocess_launcher_new (G_SUBPROCESS_FLAGS_NONE);
-- 
2.40.0


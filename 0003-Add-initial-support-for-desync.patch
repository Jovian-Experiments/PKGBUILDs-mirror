From 0b1cc0bd40b3dedba04d6e338a9d5c2b6eef5e18 Mon Sep 17 00:00:00 2001
From: Ludovico de Nittis <ludovico.denittis@collabora.com>
Date: Fri, 21 Jan 2022 17:07:38 +0100
Subject: [PATCH 2/2] Add initial support for desync

Desync is an alternative casync implementation.
Unfortunately it's not entirely a drop in replacement because they
differ for some of their launch options.

This commit adds the `use-desync` config key that offers the ability to
use desync instead of casync.

Currently the only downside is that it doesn't use the active partition
as a seed.
This is expected to be added with a future commit, but in the meantime
the `install-args` configuration option could be used to manually
specify the seeds that need to be used.

Signed-off-by: Ludovico de Nittis <ludovico.denittis@collabora.com>
---
From upstream PR https://github.com/rauc/rauc/pull/817
---
 docs/reference.rst            |  4 +++
 include/config_file.h         |  1 +
 src/bundle.c                  | 58 +++++++++++++++++++++++++++++++----
 src/config_file.c             | 11 +++++++
 src/update_handler.c          | 20 ++++++++++--
 test/config_file.c            | 41 +++++++++++++++++++++++++
 test/minimal-desync-test.conf | 10 ++++++
 test/rauc.t                   | 58 +++++++++++++++++++++++++++++++++++
 8 files changed, 195 insertions(+), 8 deletions(-)
 create mode 100644 test/minimal-desync-test.conf

diff --git a/docs/reference.rst b/docs/reference.rst
index 3ce1f6f..dd56254 100644
--- a/docs/reference.rst
+++ b/docs/reference.rst
@@ -208,6 +208,10 @@ For more information about using casync support of RAUC, refer to
   By default, the temporary directory is left unset by RAUC and casync uses its
   internal default value ``/var/tmp``.
 
+``use-desync=<true/false>``
+  If this boolean value is set to ``true``, RAUC will use desync instead of
+  casync. Desync support is still experimental, use with caution.
+
 **[autoinstall] section**
 
 The auto-install feature allows to configure a path that will be checked upon
diff --git a/include/config_file.h b/include/config_file.h
index c65a717..f3c6d5d 100644
--- a/include/config_file.h
+++ b/include/config_file.h
@@ -46,6 +46,7 @@ typedef struct {
 	gchar *store_path;
 	gchar *tmp_path;
 	gchar *casync_install_args;
+	gboolean use_desync;
 	gboolean activate_installed;
 	gchar *statusfile_path;
 	gchar *keyring_path;
diff --git a/src/bundle.c b/src/bundle.c
index 4676aa0..e8636cb 100644
--- a/src/bundle.c
+++ b/src/bundle.c
@@ -126,6 +126,8 @@ out:
 	return res;
 }
 
+static gboolean casync_make_blob(const gchar *idxpath, const gchar *contentpath, const gchar *store, GError **error);
+
 static gboolean casync_make_arch(const gchar *idxpath, const gchar *contentpath, const gchar *store, GError **error)
 {
 	g_autoptr(GSubprocess) sproc = NULL;
@@ -135,6 +137,12 @@ static gboolean casync_make_arch(const gchar *idxpath, const gchar *contentpath,
 	GPtrArray *iargs = g_ptr_array_new_full(15, g_free);
 	const gchar *tmpdir = NULL;
 
+	if (r_context()->config->use_desync) {
+		/* Desync is able to handle tar and catar archives directly, there is
+		 * no need to manually extract them. */
+		return casync_make_blob(idxpath, contentpath, store, error);
+	}
+
 	tmpdir = g_dir_make_tmp("arch-XXXXXX", &ierror);
 	if (tmpdir == NULL) {
 		g_propagate_prefixed_error(error, ierror,
@@ -214,13 +222,51 @@ static gboolean casync_make_blob(const gchar *idxpath, const gchar *contentpath,
 	gboolean res = FALSE;
 	GPtrArray *args = g_ptr_array_new_full(5, g_free);
 
-	g_ptr_array_add(args, g_strdup("casync"));
-	g_ptr_array_add(args, g_strdup("make"));
-	g_ptr_array_add(args, g_strdup(idxpath));
-	g_ptr_array_add(args, g_strdup(contentpath));
-	if (store) {
+	if (r_context()->config->use_desync) {
+		g_autofree gchar *desync_store = NULL;
+
+		if (store) {
+			desync_store = g_strdup(store);
+		} else {
+			/* With casync the default store is a directory called "default.castr",
+			 * instead, with desync, the default is to skip the store altogether.
+			 * Imitate casync behavior by using "default.castr" if a store was not
+			 * provided. */
+			desync_store = g_build_filename(g_path_get_dirname(idxpath), "default.castr", NULL);
+		}
+
+		/* Desync fails if the store directory is missing. */
+		if (!g_file_test(desync_store, G_FILE_TEST_IS_DIR)) {
+			gint ret_mkdir;
+			ret_mkdir = g_mkdir_with_parents(desync_store, 0755);
+
+			if (ret_mkdir != 0) {
+				g_set_error(
+						error,
+						G_FILE_ERROR,
+						G_FILE_ERROR_FAILED,
+						"Failed creating Desync store directory '%s'",
+						desync_store);
+				res = FALSE;
+				goto out;
+			}
+		}
+
+		g_ptr_array_add(args, g_strdup("desync"));
+		g_ptr_array_add(args, g_strdup("make"));
 		g_ptr_array_add(args, g_strdup("--store"));
-		g_ptr_array_add(args, g_strdup(store));
+		g_ptr_array_add(args, g_steal_pointer(&desync_store));
+		g_ptr_array_add(args, g_strdup(idxpath));
+		g_ptr_array_add(args, g_strdup(contentpath));
+	} else {
+		g_ptr_array_add(args, g_strdup("casync"));
+		g_ptr_array_add(args, g_strdup("make"));
+		g_ptr_array_add(args, g_strdup(idxpath));
+		g_ptr_array_add(args, g_strdup(contentpath));
+		if (store) {
+			g_ptr_array_add(args, g_strdup("--store"));
+			g_ptr_array_add(args, g_strdup(store));
+		}
 	}
 
 	if (r_context()->casync_args != NULL) {
diff --git a/src/config_file.c b/src/config_file.c
index f0dd299..ef924a6 100644
--- a/src/config_file.c
+++ b/src/config_file.c
@@ -346,6 +346,17 @@ gboolean load_config(const gchar *filename, RaucConfig **config, GError **error)
 	c->store_path = key_file_consume_string(key_file, "casync", "storepath", NULL);
 	c->tmp_path = key_file_consume_string(key_file, "casync", "tmppath", NULL);
 	c->casync_install_args = key_file_consume_string(key_file, "casync", "install-args", NULL);
+	c->use_desync = g_key_file_get_boolean(key_file, "casync", "use-desync", &ierror);
+	if (g_error_matches(ierror, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_KEY_NOT_FOUND) ||
+	    g_error_matches(ierror, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_GROUP_NOT_FOUND)) {
+		c->use_desync = FALSE;
+		g_clear_error(&ierror);
+	} else if (ierror) {
+		g_propagate_error(error, ierror);
+		res = FALSE;
+		goto free;
+	}
+	g_key_file_remove_key(key_file, "casync", "use-desync", NULL);
 	if (!check_remaining_keys(key_file, "casync", &ierror)) {
 		g_propagate_error(error, ierror);
 		res = FALSE;
diff --git a/src/update_handler.c b/src/update_handler.c
index cd94247..e51bf2f 100644
--- a/src/update_handler.c
+++ b/src/update_handler.c
@@ -246,7 +246,11 @@ static gboolean casync_extract(RaucImage *image, gchar *dest, int out_fd, const
 	gboolean res = FALSE;
 	g_autoptr(GPtrArray) args = g_ptr_array_new_full(5, g_free);
 
-	g_ptr_array_add(args, g_strdup("casync"));
+	if (r_context()->config->use_desync)
+		g_ptr_array_add(args, g_strdup("desync"));
+	else
+		g_ptr_array_add(args, g_strdup("casync"));
+
 	g_ptr_array_add(args, g_strdup("extract"));
 	if (seed) {
 		g_ptr_array_add(args, g_strdup("--seed"));
@@ -256,7 +260,10 @@ static gboolean casync_extract(RaucImage *image, gchar *dest, int out_fd, const
 		g_ptr_array_add(args, g_strdup("--store"));
 		g_ptr_array_add(args, g_strdup(store));
 	}
-	g_ptr_array_add(args, g_strdup("--seed-output=no"));
+	/* Desync doesn't have the --seed-output option */
+	if (!r_context()->config->use_desync)
+		g_ptr_array_add(args, g_strdup("--seed-output=no"));
+
 	if (r_context()->config->casync_install_args != NULL) {
 		gboolean parse_res = FALSE;
 		parse_res = g_shell_parse_argv(r_context()->config->casync_install_args, NULL, &casync_argvp, &ierror);
@@ -282,6 +289,10 @@ static gboolean casync_extract(RaucImage *image, gchar *dest, int out_fd, const
 	if (tmpdir)
 		g_subprocess_launcher_setenv(launcher, "TMPDIR", tmpdir, TRUE);
 
+  /* Enable Desync parsable progress updates */
+  if (r_context()->config->use_desync)
+    g_subprocess_launcher_setenv(launcher, "DESYNC_ENABLE_PARSABLE_PROGRESS", "1", TRUE);
+
 	sproc = r_subprocess_launcher_spawnv(launcher, args, &ierror);
 	if (sproc == NULL) {
 		g_propagate_prefixed_error(
@@ -334,6 +345,11 @@ static gboolean casync_extract_image(RaucImage *image, gchar *dest, int out_fd,
 	gchar *tmpdir = NULL;
 	gboolean seed_mounted = FALSE;
 
+	if (r_context()->config->use_desync) {
+		/* TODO: do something clever to locate and/or generate the seed index file */
+		goto extract;
+	}
+
 	/* Prepare Seed */
 	seedslot = get_active_slot_class_member(image->slotclass);
 	if (!seedslot) {
diff --git a/test/config_file.c b/test/config_file.c
index 814f99a..267fd1d 100644
--- a/test/config_file.c
+++ b/test/config_file.c
@@ -120,6 +120,10 @@ install-same=false\n";
 	g_assert_cmpstr(config->statusfile_path, ==, "/mnt/persistent-rw-fs/system.raucs");
 	g_assert_cmpint(config->max_bundle_download_size, ==, 42);
 	g_assert_cmphex(config->bundle_formats_mask, ==, 0x2);
+	g_assert_cmpstr(config->store_path, ==, "/var/lib/default.castr/");
+	g_assert_cmpstr(config->tmp_path, ==, "/tmp/");
+	g_assert_cmpstr(config->casync_install_args, ==, "--verbose");
+	g_assert_false(config->use_desync);
 
 	g_assert_nonnull(config->slots);
 	slotlist = g_hash_table_get_keys(config->slots);
@@ -1162,6 +1166,40 @@ static void config_file_test_parse_bundle_formats(void)
 	g_clear_error(&ierror);
 }
 
+static void config_file_use_desync_set_to_true(ConfigFileFixture *fixture,
+		gconstpointer user_data)
+{
+	RaucConfig *config;
+	g_autoptr(GError) ierror = NULL;
+	gboolean res;
+	g_autofree gchar* pathname = NULL;
+
+	const gchar *cfg_file = "\
+[system]\n\
+compatible=FooCorp Super BarBazzer\n\
+bootloader=barebox\n\
+\n\
+[casync]\n\
+storepath=/var/lib/default.castr/\n\
+tmppath=/tmp/\n\
+install-args=--seed /my/path/additional_seed.caibx\n\
+use-desync=true";
+
+	pathname = write_tmp_file(fixture->tmpdir, "simple_desync.conf", cfg_file, NULL);
+	g_assert_nonnull(pathname);
+
+	res = load_config(pathname, &config, &ierror);
+	g_assert_no_error(ierror);
+	g_assert_true(res);
+	g_assert_nonnull(config);
+	g_assert_cmpstr(config->store_path, ==, "/var/lib/default.castr/");
+	g_assert_cmpstr(config->tmp_path, ==, "/tmp/");
+	g_assert_cmpstr(config->casync_install_args, ==, "--seed /my/path/additional_seed.caibx");
+	g_assert_true(config->use_desync);
+
+	free_config(config);
+}
+
 int main(int argc, char *argv[])
 {
 	setlocale(LC_ALL, "C");
@@ -1258,6 +1296,9 @@ int main(int argc, char *argv[])
 			config_file_fixture_set_up, config_file_bundle_formats,
 			config_file_fixture_tear_down);
 	g_test_add_func("/config-file/parse-bundle-formats", config_file_test_parse_bundle_formats);
+	g_test_add("/config-file/use-desync", ConfigFileFixture, NULL,
+			config_file_fixture_set_up, config_file_use_desync_set_to_true,
+			config_file_fixture_tear_down);
 
 	return g_test_run();
 }
diff --git a/test/minimal-desync-test.conf b/test/minimal-desync-test.conf
new file mode 100644
index 0000000..ada873e
--- /dev/null
+++ b/test/minimal-desync-test.conf
@@ -0,0 +1,10 @@
+# testsuite system configuration
+
+[system]
+compatible=Test Config
+bootloader=grub
+grubenv=grubenv.test
+variant-name=Default Variant
+
+[casync]
+use-desync=true
diff --git a/test/rauc.t b/test/rauc.t
index defa1ce..152dae6 100755
--- a/test/rauc.t
+++ b/test/rauc.t
@@ -135,6 +135,10 @@ grep -q "ENABLE_SERVICE 1" $SHARNESS_TEST_DIRECTORY/../config.h &&
 casync --version &&
   test_set_prereq CASYNC
 
+# Prerequisite: desync available [DESYNC]
+desync --help &&
+  test_set_prereq DESYNC
+
 # Prerequisite: softhsm2 installed [PKCS11]
 test -f ${SOFTHSM2_MOD} &&
   prepare_softhsm2 &&
@@ -572,6 +576,60 @@ test_expect_success CASYNC "rauc convert casync extra args" "
   test -f casync-extra-args.raucb
 "
 
+test_expect_success DESYNC "rauc convert with desync" "
+  cp -L ${SHARNESS_TEST_DIRECTORY}/good-bundle.raucb ${TEST_TMPDIR}/ &&
+  test_when_finished rm -f ${TEST_TMPDIR}/good-bundle.raucb &&
+  rm -f desync.raucb &&
+  rauc \
+    --cert $SHARNESS_TEST_DIRECTORY/openssl-ca/dev/autobuilder-1.cert.pem \
+    --key $SHARNESS_TEST_DIRECTORY/openssl-ca/dev/private/autobuilder-1.pem \
+    --keyring $SHARNESS_TEST_DIRECTORY/openssl-ca/dev-ca.pem \
+    --conf $SHARNESS_TEST_DIRECTORY/minimal-desync-test.conf \
+    convert ${TEST_TMPDIR}/good-bundle.raucb desync.raucb &&
+  test -f desync.raucb
+"
+
+test_expect_success DESYNC "rauc convert with desync (output exists)" "
+  cp -L ${SHARNESS_TEST_DIRECTORY}/good-bundle.raucb ${TEST_TMPDIR}/ &&
+  test_when_finished rm -f ${TEST_TMPDIR}/good-bundle.raucb &&
+  touch desync.raucb &&
+  test_must_fail rauc \
+    --cert $SHARNESS_TEST_DIRECTORY/openssl-ca/dev/autobuilder-1.cert.pem \
+    --key $SHARNESS_TEST_DIRECTORY/openssl-ca/dev/private/autobuilder-1.pem \
+    --keyring $SHARNESS_TEST_DIRECTORY/openssl-ca/dev-ca.pem \
+    --conf $SHARNESS_TEST_DIRECTORY/minimal-desync-test.conf \
+    convert ${TEST_TMPDIR}/good-bundle.raucb desync.raucb &&
+  test -f desync.raucb
+"
+
+test_expect_success DESYNC "rauc convert with desync (error)" "
+  cp -L ${SHARNESS_TEST_DIRECTORY}/good-bundle.raucb ${TEST_TMPDIR}/ &&
+  test_when_finished rm -f ${TEST_TMPDIR}/good-bundle.raucb &&
+  rm -f desync.raucb &&
+  test_must_fail rauc \
+    --cert $SHARNESS_TEST_DIRECTORY/openssl-ca/rel/release-2018.cert.pem \
+    --key $SHARNESS_TEST_DIRECTORY/openssl-ca/rel/private/release-2018.pem \
+    --keyring $SHARNESS_TEST_DIRECTORY/openssl-ca/rel-ca.pem \
+    --conf $SHARNESS_TEST_DIRECTORY/minimal-desync-test.conf \
+    convert ${TEST_TMPDIR}/good-bundle.raucb desync.raucb &&
+  test ! -f desync.raucb
+"
+
+test_expect_success DESYNC "rauc convert desync extra args" "
+  cp -L ${SHARNESS_TEST_DIRECTORY}/good-bundle.raucb ${TEST_TMPDIR}/ &&
+  test_when_finished rm -f ${TEST_TMPDIR}/good-bundle.raucb &&
+  rm -f desync-extra-args.raucb &&
+  rauc \
+    --cert $SHARNESS_TEST_DIRECTORY/openssl-ca/dev/autobuilder-1.cert.pem \
+    --key $SHARNESS_TEST_DIRECTORY/openssl-ca/dev/private/autobuilder-1.pem \
+    --keyring $SHARNESS_TEST_DIRECTORY/openssl-ca/dev-ca.pem \
+    --conf $SHARNESS_TEST_DIRECTORY/minimal-desync-test.conf \
+    convert \
+    --casync-args=\"--chunk-size=32:128:512\" \
+    ${TEST_TMPDIR}/good-bundle.raucb desync-extra-args.raucb &&
+  test -f desync-extra-args.raucb
+"
+
 test_expect_success "rauc resign" "
   rm -f out.raucb &&
   rauc \
-- 
2.34.1

